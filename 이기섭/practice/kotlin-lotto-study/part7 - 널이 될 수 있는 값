# 널이 될 수 있는 값
- 널이 될 수 있는 타입
- 널이 될 가능성이 있는 값을 다루는 구문의 문법
- 널이 될 수 있는 타입과 널이 될 수 없는 타입의 변환
- 코틀린의 널 가능성 개념과 자바 코드 사이의 상호운용성

## 7.1 NullPointerException을 피하고 값이 없는 경우 처리: 널 가능성
널이 될 가능성이 있는 타입을 타입시스템에 추가함으로써 컴파일 시점에 미리 김지

## 7.2 널이 될 수 있는 타입으로 널이 될 수 있는 변수 명시
- null을 포함하는 참조 지정 -> ? ex) String?
- 코틀린은 기본적으로 null 이 아닌 타입

java코드 예시
```java
int strLen(String s) {
    return s.length();
}
```

null을 인자로 받지 않는 코틀린 코드
```kotlin
fun strLen(s:String) = s.length
```

실행 시점에 에러발생
```kotlin
fun () {
    strLen(null)
    //ERROR : Null can not be a value of a non-null type String
}
```

```kotlin
fun main() {
    val x: String? = null
    var y: String = x
    //ERROR: Type mismatch:
    //inferred type is String? but String was expected
}
```

if 검사를 통해 null 다루기
```kotlin
fun strLenSafe(s: String?): Int = if(s != null) s.length else 0

fun main() {
    val x: String? = null
    println(strLenSafe(x))
    println(strLenSafe("abc"))
}
```

## 7.3 타입의 의미 자세히 살펴보기
- @Nullable, @NotNull , 인텔리제이 코드검사기로 NPE를 방지해주는 도구들이 있다
- 모든 가능성에 어노테이션을 붙이기 어렵고, IDE도 완벽하게 해결해줄 수 없음.
- 래퍼클래스 Optional은 코드가 지저분해지고 래퍼추가로 성능 저하 및 일관성 유지하기 힘듦

## 7.4 안전한 호출 연산자로 null 검사와 메서도 호출 합치기: ?.
- ?.
- if(str!=null) str.uppercase() else null
- null이 아니면 수행, null 이면 null 반환

```kotlin
fun printAllCaps(str: String) {
    val allCaps: String? = str?.uppercase()
}
```

널이 될 수 있는 프로퍼티를 다루기 위해 안전한 호출 사용하기
```kotlin
class Employee(val name: String, val manager: Employee?)

fun managerName(employee: Employee): String? = employee.manager?.name

fun main() {
  val ceo = Employee("Da Boss", null)
  val developer = Employee("Bob swith", ceo)
  println(managerName(developer))
  // Da Boss
  println(managerName(ceo))
  // null
}
```

안전한 호출 연쇄시키기
```kotlin
class Address(val streetAddress: Straing, val zipCode: Int, val city: String, val country: String)

class Company(val name: String, val address: Address?)

class Person(val name: String, val compnany:Company?)

fun Person.countryName(): String {
    val country = this.compnany?.address?.country
    return if (country != null) country else "Unkown"
}

fun main() {
    val person = Person("Dmitry", null)
    prinln(person.countryName())
}

```

## 7.5 엘비스 연산자로 null에 대한 기본값 제공: ?:
- ?:
- null 이면 기본값 리턴
```kotlin
fun greet(name: String?) {
    val recipient : String = name ?: "unnamed"
    println("Hello, $recipient!")
}

```

throw와 엘비스 연산자 함께 사용하기

```kotlin
class Address(val streetAddress: String, val zipCode:Int, val city: String, val country:String)
class Company(val name: String, val address: Address?)
class Person(val name: String, val company: Company?)

fun printShippingLabel(person: Person) {
    val address = person.company?.address
      ?: throw IllegalArgumentException("No address")
    with (address) {
        println(streetAddress)
        println("$zipCode $city, $country")
    }
}

fun main() {
    val address = Address("Elsestr. 47", 80687, "Munich", "Germanay")
    val jetbrains = Company("JetBrains", address)
    val person = Person("Dmitry", jetbrains)
  
    printShippingLabel(person)
    // Elsestr. 47
    // 80687 Munich, Germany
  
    printShippingLabel(Person("Alexey", null))
    //java.lang.IllegalArgumentException: No address
}
```

## 7.6 예외를 발생시키지 않고 안전하게 타입을 캐스트하기: as?
- 어떤 값을 지정한 타입으로 변환
- 변환할 수 없으면  null반환

안전한 연산자를 사용해 equals 구현하기
```kotlin
class Person(val firstName: String, val lastName: String) {
    override fun equals(other: Any?): Boolean {
        val otherPerson = o as? Person ?: return false //Person으로 타입캐스트 하다가 안되면  false 반환
      
        return otherPerson.firstName == firstName && otherPerson.lastName == lastName
    }
  
    override fun hashCode(): Int =
        firstName.hashCode() * 37 + lastName.hashCode()
}

fun main() {
    val p1 = Person("Dmitry", "Jemerov")
    val p2 = Person("Dmitry", "Jemerov")
    println(p1 == null)
    //false
    println(p1 == p2)
    //true
    println(p1.equals(42))
    //false
}
```

## 7.7 널 아님 단언: !!

- !!
- 널 아니면 NPE발생

```kotlin
fun ignoreNulls(str: String?) {
    val strNotNull: String = str!!
    println(strNotNull.length)
}

fun main() {
    ignoreNulls(null)
    //Exception in thread "main" kotlin.KotlinNullPointerException
}
```

액션 클래스에서 널 아님 단언문 사용하기 
```kotlin
class SelectableTextList(
    val contents: List<String>,
    var selectedIndex: Int? = null,
)

class copyRowAction(val list: SelectableTextList) {
    fun isActionEnabled(): Boolean = list.selectedIndex != null
    fun executeCopyRow() {
        val index = list.selectedIndex!!
        val value = list.contents[index]
    }
}
```

## 7.8 let 함수
- 널이될 수 있는 식을 쉽게 다룰 수 있음
- 자바의 Optional.map 과 비슷하지만 래퍼클래스인 Optional보다 JVM이 직접 처리하여 인스턴스 생성 비용이 없어 성능적으로 유리함.

let을 사용해 널이 아닌 인자로 함수 호출하기
```kotlin
fun sendEmailTo(email: String) {
    println("Sending email to $email")
}

fun main() {
    var email: String? = "yole@example.com"
    email?.let {sendEmailTo(it)}
    //Sending email to yole@example.com
    email = null
    email?.let {sendEmailTo(it)}
}
```

### 코틀린 영역 함수 비교 : with, apply, let, run, also 사용 시기

- null이 아닌 경우에만 코드블록 실행 => let 과 안전한 호출 ?.
- 빌더 스타일의 객체 프로퍼티 설정 => apply
- 객체에 동작 수행 후 다른 연산에 사용하고 싶을 때  => also
- 하나의 객체에 대해 이름을 반복하지 않으면서 여러 함수 호출을 그룹으로 묶고 싶을 때 => with
- 별도의 결과를 돌려줄 때 => run

## 7.9 직접 초기화하지 않는 널이 아닌 타입: 지연 초기화 프로퍼티
지연 초기화하는 프로퍼티 사용 (생성자 밖에서 값을 바꿔야 하기 때문에 무조건 var 선언)
```kotlin
class MyService {
    fun performAction(): String = "Action Done!"
}

@TestInstance(TestInstance.LifeCycle.PER_CLASS)
class MyTest {
    private lateinit var myService: MyService
    
    @BeforeAll fun setUp() {
        myService = MyService()
    }
    
    @Test fun testAction() {
        assertEquals("Action Done!", myService.performAction())
    }
}
```

## 7.10 안전한 호출 연산자 없이 타입 확장: 널이 될 수 있는 타입에 대한 확장
널이 될 수 있는 수신 객체애 대해 확장 함수 호출하기
```kotlin
fun verifyUserInput(input: String) {
    if (input.isNullOrBlank()) {
        println("Please fill in the required fields")
    }
}

fun main() {
    verifyUserInput(" ")
    // Please fill in the required fields
    verifyUserInput(null)
    //Please fill in the required fields
}
```
input.isNullOrBlank() -> 널이될수 있는 타입 input, 널이될 수 있는 타입의 확장함수 isNullOrBlank() 에 안전한 
호출을 사용하지 않고 구현되어있지만 함수는 null 값이 들어오는 경우 이를 적절히 처리하고있음

let을 사용할 때 수신 객체가 null이 아닌지 검사하고싶다면 안전한 호출 연산자?. 를 사용해야함
```kotlin
fun sendEmailTo(email: String) {
    println("Sending email to $email")
}

fun main() {
    val recipient: String? = null
    recipient.let { sendEmailTo(it) }
    //ERROR: Type mismatch:
}
```


## 7.11 타입 파라미터의 널 가능성
널이될 수 있는 타입 파라미터 다루기
```kotlin
fun <T> printHashCode(t: T) {
    println(t?.hashCode())
}

fun main() {
    printHashCode(null)
    // null
}
```

타입 파라미터에 대해 널이 될 수 없는 상계를 사용하기
```kotlin
fun <T: Any> printHashCode(t: T) {
    println(t.hashCode())
}

fun main() {
    printHashCode(null)
    // Error: Type parameter bound for 'T' is not satisfied
    printHashCode(42)
    // 42
}
```

## 7.12  널 가능성과 자바
- @Nullable String = String?
- @NotNull String = String

### 7.12.1 플랫폼 타입
- 코틀린이 널 관련 정보를 알 수 없는 타입
- 플랫폼 타입에 대해 수행하는 모든 연산은 사용자에게 있음
- 자바의 타입을 널이 될 수 있는 타입으로 변환하면 컬렉션을 다룰 때 원소에 접근 시마다 null 검사와 안전한 캐스트를 수행해야 하기 때문에
비용이 많이 발생함. 그래서 플랫폼 타입을 제대로 처리할 책임을 프로그래머에게 부여하여 실용적으로 접근하는 방법을 채택

```java
public class Person {
    private final String name;
    
    public Person(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
}

```

null 검사 없이 자바 클래스 접근하기
```kotlin
fun yellAt(person: Person) {
    println(person.name.uppercase() + "!!!")
}

fun main() {
    yellAt(Person(null))
    //java.lang.NullPointerException
}
```

null 검사를 통해 자바클래스 접근하기
```kotlin
fun yellAt(person: Person) {
    println((person.name ?: "Anyone").uppercase() + "!!!")
}

fun main() {
    yellAt(Person(null))
    //Anyone
}
```

### 7.12.2 상속
String 파라미터가 있는 자바 인터페이스
```java
interface StringProcessor {
    void process(String value);
}
```
자바 인터페이스를 다른 여러 널 가능성의 파라미터로 구현하기
```kotlin
class StringPrinter : StringProcessor {
    override fun process(value: String) {
        println(value)
    }
}

class NullableStringPrinter : StringProcessor {
    override fun process(value: String?) {
        if (value != null) {
            println(value)
        }
    }
}
```

어떤 값이 null 이었는지를 한눈에 파악하기위해 함께 쓰는 일은 피하자
person.company!!.address!!.country
- 변수에 널 허용 = 타입에 ?
- 안전한 호출(null이면 null리턴) = ?.
- 엘비스 연산자(null이면 기본값 리턴) = ?:
- 안전한 캐스트(null이면 기본값 리턴) = as?
- 널 아니면 NPE발생 : !!