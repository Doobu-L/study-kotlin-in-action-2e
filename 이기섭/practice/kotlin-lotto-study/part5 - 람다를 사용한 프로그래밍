# 5장 람다를 사용한 프로그래밍
- 람다식과 멤버 참조를 사용해 코드 조각과 행동 방식을 함수에게 전달
- 코틀린에서 함수형 인터페이스를 정의하고 자바의 함수형 인터페이스를 사용
- 수신 객체 지정 람다 사용

## 5.1 람다식과 멤버 참조
### 5.1.1 람다 소개: 코드 블록을 값으로 다루기

- 일급 시민인 함수 : 함수를 값으로 다룰 수 있다. 함수에서 다른 함수를 반환할 수 있다
- 불변성 : 객체를 만들 때 일단 만들어진 다음에는 내부 상태가 변하지 않음을 보장하는 방법으로 설계
- 부수 효과 없음 : 다른 객체나 외부 세계의 상태를 변경하지 않게 구성...이것은 PURE..

object 선언으로 리스너 구현
```kotlin
button.setOnClickListener(obejct: OnClickListener {
    override fun onClick(v: View) {
        println("I was clicked!")
    }
})
```
람다로
```kotlin
button.setOnClickListener {
    println("I was clicked!")
}
```

### 5.1.2 람다와 컬렉션
```kotlin
data class Person(val name:String, val age:Int)

fun findTheOldest(people: List<Person>) {
    var maxAge = 0
    var theOldest: Person? = null
    for (person in people) {
        if (person.age > maxAge) {
            maxAge = person.age
            theOldest = person
        }
    }
    println(theOldest)
}

fun main() {
    val people = listOf(Person("Alice", 29), Person("Bob", 31), Person("Giseop", 24))
    findTheOldest(people)
    // Person(name=Bob, age=31)

    println(people.maxByOrNull {it.age})
    // Person(name=Bob, age=31)

    //자바였다면 people.stream().max(Comparator.comparingInt(Person::getAge)).orElseGet(null)

    //정식 코드 식
    people.maxByOrNull({p:Person -> p.age})

    //실제 함수
    public inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T?{
        //... 
    }
}
```
- maxByOrNull : 최대값을 지닌 객체 반환, 모든 컬렉션에 사용가능

이름 붙인 인자를 사용해 람다 넘기기
```kotlin
fun main() {
    val people = listOf(Person("Alice", 29), Person("Bob", 31))
    val names = people.joinToString(
        separator = " ",
        transform = {p: Person -> p.name}
    )
    println(names)
    // Alice Bob

    //이걸 괄호 밖으로 전달
    people.joinToStaring(" ") {p:Person -> p.name}

    //파라미터 타입 제거되면
    people.maxByOrNull { p: Person -> p.age} //파라미터타입 명시
    people.maxByOrNull { p -> p.age} //파라미터 타입을 컴파일러가 추론... 대 추론...!!

}
```

컴파일러가 람다 파라미터 타입을 추론하지 못하는 경우도 있지만, 언제 그런지는 여기서 다루지 않음. 컴파일러가 타입을 추론 못하는 경우 컴파일 시점에 알려주니 그때는 명시하도록!

```kotlin
fun main() {
    val sum = {x:Int, y:Int ->
        println("Computing the sum of $x and $y...")
        x + y
    }
}
```
- 본문이 여러줄이면 맨 마지막 식이 람다의 return 값이 된다. return 이 없음.


람다 안에서 바깥 함수의 로컬 변수 변경하기
```kotlin
fun printProblemCounts(responses: Collection<String>) {
    var clientErrors = 0
    var serverErrors = 0
    responses.forEach {
        if (it.startsWith("4")) {
            clientErrors++
        } else if (it.startsWith("5")) {
            serverErrors++
        }
    }
    println("$clientErrors client errors, $serverErrors server errors")
}

fun main() {
    val responses = listOf("200 OK", "418 I'm a teapot",
        "500 Interval Server Error")
    printProblemCounts(responses)
    // 1 client erros, 1 server errors
}
```

- 람다 안에서 람다 밖 변수에 접근 및 변경 (prefix, clientErrors, serverErrors)
- 위 변수들을 람다가 캡처한 변수

어떻게 가능한가?
```kotlin
class Ref<T>(var value: T)

fun main() {
    val counter = Ref(0)  //val 선언한 참조 클래스의 인스턴스에 var변수 변경
    val inc = {counter.value++}
}

fun main() {
    var counter = 0     //var로 해도 위의 속임수를 적용해서 람다에서 변경가능
    val inc = {counter++}
}
```

### 5.1.5 멤버 참조
- ::
- Person::age
- ::Person -> Person 생성자 참조
- ::sendEamil -> 람다 대신 멤버 참조
- Person::isAdult -> 확장함수도 참조

### 5.1.6
```kotlin
val seb = Person("Sebastian", 26)
val personsAgeFunction = Person::age

println(personsAgeFunction(seb))
//26

val sebsAgeFuntion = seb::age
println(sebsAgeFuntion())
```

## 5.2 자바의 함수형 인터페이스 사용: 단일 추상 메서드
```kotlin
button.setOnClickListener {
    println("I was clicked")
}

public class Button {
    public void setOnClickListener(OnClickListener l) {
        //...
    }
}

public interface OnClickListener {
    void onClick(View v)
}
//메서드가 onClick 하나임

//자바 8 이전 익명클래스 인스턴스 생성해서 인자로 전달
button.setOnClickListener(new ClickListener()) {
    @Override
    public void onClick(View v) {
        //..
    }
}

//자바 8 이상
button.setOnClickListener(view -> {/* .. */})

//코틀린 
button.setOnClickListener( view -> /* ... */)
```
- OnClickListener의 추상메소드가 onClick 하나이기 때문에 가능
- SAM : Single Abstract Method 단일 추상 메서드 인터페이스 = 함수형 인터페이스

### 5.2.1 람다를 자바 메서드의 파라미터로 전달
- Runnable 을 인자로 받는 메서드
- 명시적으로 구현하면 Runnable의 익명 객체를 생성, 매번 생성
- 람다는 람다에 해당하는 익명 객체가 재사용된다.
- 함수형 인터페이스를 받는 자바 메서드에 대해서는 성립하지만, 코틀린 확장함수에 전달할 수 없음

### 5.2.2 SAM 변환: 람다를 함수형 인터페이스로 명시적 변환

값을 반환하기 위해 SAM 생성자 사용
```kotlin
fun createAllDoneRunnable() : Runnable {
    return Runnable {println("All Done!")}
}

fun main() {
    createAllDoneRunnable().run()
    //All Done!
}
```

- SAM 생성자의 이름 =  사용하려는 함수형 인터페이스 이름

SAML 생성자를 사용해 listener 인스턴스 재사용하기
```kotlin
val listener = OnClickListener { view ->  //SAM 생성자 호출
    val text = when(view.id) {
        button1.id -> "First button"
        button2.id -> "Second button"
        else -> "Unknown button"
    }
    toast(text)
}
button1.setOnClickListener(listener)
button2.setOnClickListener(listener)
```
## 5.3 코틀린에서 SAM 인터페이스 정의: fun interface

추상 메서드가 단 하나만 들어있는 코틀린 함수형 인터페이스
```kotlin
fun interface IntCondition {
    fun check(i: Int) : Boolean
    fun checkString(s: String) = check(s.toInt())
    fun checkChar(c: Char) = check(c.digitToInt())
}

fun main() {
    val isOdd = IntCondition {it % 2 != 0}
    println(isOdd.check(1))
    println(isOdd.checkString("2"))
    println(isOdd.checkChar('3'))
}
```

함수형 인터페이스는 동적으로 인스턴스화된다.
```kotlin
fun checkCondition(i: Int, condition: IntCondition) : Boolean {
    return condition.check(i)
}

fun main() {
    checkCondition(1) {it % 2 != 0} //람다 직접참조
    
    val isOdd: (int)  -> Boolean = {it % 2 != 0}
    checkCondition(1, isOdd) //시그니처가 일치
}
```

- 자바에서 사용할 때 코틀린의 함수형 인터페이스를 호출하려면 Unit.INSTANCE 를 반환해야함.

## 5.4 수신 객체 지정 람다 : with, apply, also
- 코틀린 표준 라이브러리의 유용한 함수들
- lamda with receiver

### 5.4.1 with 함수
- 람다 식의 결과가 필요할 때 사용
```kotlin
fun alphabet() : String {
    val result = StringBuilder()
    for (letter in 'A'..'Z') {
        result.append(letter)
    }
    result.append("\nNow I know the alphabet!")
    return result.toString()
}
```

```kotlin
fun alphabet() : String {
    val stringBuilder = StringBuilder()
    return with(stringBuilder) {
        for(letter in 'A' .. 'Z'){
            append(letter)
        }
        append("\nNow I know the alphabet!")
        result.toString()
    }
}
```

식을 본문 함수로 활용
```kotlin
fun alphaber() = with(StringBuilder()) {
    for(letter in 'A' .. 'Z'){
        append(letter)
    }
    append("\nNow I know the alphabet!")
    result.toString()
}
```

### 5.4.2 apply 함수
- 람다 식의 결과 대신 수신 객체가 필요할 때 사용

```kotlin
fun alphabet() = StringBuilder().apply {
    for(letter in 'A' .. 'Z'){
        append(letter)
    }
    append("\nNow I know the alphabet!")
}.toString()
```
- 인스턴스를 만들면서 프로퍼티 중 일부를 초기화해야 하는 경우 사용

```kotlin
fun createViewWithCustomAttributes(context: Context) = 
    TextView(context).apply {
        text = "Sample Text"
        textSize = 20.0
        setPadding(10, 0, 0 ,0)
    }
```

표준 라이브러리이 buildString
```kotlin
fun alphabet() = buildString{
    for(letter in 'A' .. 'Z'){
        append(letter)
    }
    append("\nNow I know the alphabet!")
}
```

표준 라이브러리의 buildList, buildSet, buildMap 사용
```kotlin
val fibonacci = buildList {
    addAll(listOf(1, 1, 2))
    add(3)
    add(index = 0, element = 3)
}

val shouldAdd = true

val fruits = buildSet {
    add("Apple")
    if (shouldAdd) {
        addAll(listOf("Apple", "Banana" , "Cherry"))
    }
}

val medals = buildMap<String, Int> {
    put("Gold", 1)
    putAll(listOf("Silver" to 2, "Bronze" to 3))
}
```

### 5.4.3 객체에 추가 작업 수행: also

- apply 와 마찬가지로 수신객체를 받고 반환
- apply 는 프로퍼티 or 함수 수행, also 는 수신 객체를 인자로 참조

also 사용해 효과를 추가로 적용
```kotlin
fun main() {
    val fruits = listOf("Apple", "Banana", "Cherry")
    val uppercaseFruits = mutableListOf<String> ()
    val recersedLongFruits = fruits
        .map {it.uppercase()}
        .also {uppercaseFruits.addAll(it)}
        .filter {it.length > 5}
        .also {println(it)}
        .reversed()
}
```